openapi: 3.0.1
info:
  title: Commerce Api
  description: 'Esta es la documentaciÃ³n de commerce api.'
  termsOfService: http://swagger.io/terms/
  contact:
    email: rodrigosaez93@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: http://localhost:8080
tags:
- name: commerce
  description: Api de ecommerce
  externalDocs:
    description: Find out more
    url: http://swagger.io

- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
paths:
  /product:
    get:
      tags:
      - product
      summary: list
      
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Product not found
          content: {}
        405:
          description: Validation exception
          content: {}
    post:
      tags:
      - product
      summary: Adds new product
      operationId: addProduct
      requestBody:
        description: El producto a agregar
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/xml:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
  /product/{category}:
    get:
      tags:
      - product
      summary: list
      operationId: bb
      parameters:
        - in: path
          name: category
          schema:
            type: string
          required: true
          description: La categoria del producto
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        405:
          description: Validation exception
          content: {}
  /carrito:
    get:
      tags:
      - carrito
      summary: List the cart
      description: Muliple tags can be provided with comma separated strings. Use         tag1,
        tag2, tag3 for testing.
      operationId: listTheCart
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Carrito'
  /carrito/add:
    post:
      tags:
      - carrito
      summary: Adds a new product to cart
      description: Adds a product to cart
      operationId: addProductToCart
      requestBody:
        description: The product to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddOrDeleteToCarrito'
          application/xml:
            schema:
              $ref: '#/components/schemas/AddOrDeleteToCarrito'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Carrito'
            application/json:
              schema:
                $ref: '#/components/schemas/Carrito'
        400:
          description: Invalid ID supplied
          content: {}
  /carrito/delete:
    post:
      tags:
      - carrito
      summary: Delete Carrito
      operationId: uploadFile
      requestBody:
        description: El producto a eliminar
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddOrDeleteToCarrito'
          application/xml:
            schema:
              $ref: '#/components/schemas/AddOrDeleteToCarrito'
        required: true
    
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Carrito'
  /carrito/submit:
    post:
      tags:
      - carrito
      summary: Submits a cart
      description: Returns the new order
      operationId: getInventory
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /orden/list:
    get:
      tags:
      - orden
      summary: List the orders
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
  /orden/{Id}:
    get:
      tags:
      - orden
      summary: Gets an order by id
      description: For valid response try integer IDs with value >= 1 and <= 10.         Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
      - name: Id
        in: path
        description: ID of orden that needs to be fetched
        required: true
        schema:
          example: 61e07d2b70e95b46961df136
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
   
  /user/signup:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserSignup'
        required: true
      responses:
        default:
          description: successful operation
          content: {}

  /user/login:
    post:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      requestBody:
        description: User data to login
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
          
  /orden/complete:
    post:
      tags:
      - orden
      summary: Completar una orden
      requestBody:
        description: The order id to mark as complete
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/OrderComplete'
        required: true
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /config:
    get:
      tags:
      - config
      summary: Trae la Configuacion
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Config'
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
          
  /image/upload:
    post:
      tags:
        - imagen
      summary: Sube imagen y devuelve la direccion
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                idProducto:
                  type: string
                  example: 61e07d2b70e95b46961df136
                file:
                  type: string
                  format: binary
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
components:
  schemas:
    AddOrDeleteToCarrito:
      type: object
      properties:
        id:
          type: string
          example: 61e07d2b70e95b46961df136
        cantidad: 
          type: integer
          example: 7
    UserLogin:
      type: object
      properties:
        email:
          type: string
          example: rodrigosaez@gmail.com
        password:
          type: string
          example: the_password_2011!
    UserSignup:
      type: object
      properties:
        email:
          type: string
          example: rodrigosaez@gmail.com
        password:
          type: string
          example: the_password_2011!
        name: 
          type: string
          example: 'Rodrigo Saez'
        phone:
          type: number
          example: 5493512582919
    OrderComplete:
      type: object
      properties:
        id:
          type: string
          example: 61e07d2b70e95b46961df136
    Config:
      type:
        object
      properties:
        db_mongo: 
          type: string
        token_secret: 
          type: string
        sender_email:
          type: string
        sender_password:
          type: string
        session_duration:
          type: integer
        port:
          type: integer
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        OrderId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Carrito:
      type: object
      properties:
        email:
          type: string
        fechaYHora:
          type: string
        direccion:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/ItemCarrito'
      xml:
        name: Carrito
    ItemCarrito:
      type: object
      properties:
        cantidad:
          type: number
        idProducto:
          type: string
        precio: 
          type: number
    Product:
      required:
      - name
      - photoUrls
      type: object
      properties:
        foto:
          type: string
          example: 'https://www.google.com/image.jpg'
        price:
          type: number
          example: 10.50
        descripcion:
          type: string
          example: doggie
        category:
          type: string
          description: product category in the store
      xml:
        name: Product
